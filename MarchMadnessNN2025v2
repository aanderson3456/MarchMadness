{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11484718,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/bosstinanderson/marchmadnessnn2025v2?scriptVersionId=233358388\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\nclass SimpleNeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(SimpleNeuralNet, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.fc2(x)\n        return x\n\ndef train_network(model, train_loader, criterion, optimizer, epochs, device):\n    model.train()\n    for epoch in range(epochs):\n        running_loss = 0.0\n        for inputs, labels in train_loader:\n            inputs, labels = inputs.to(device), labels.to(device) #move data to device\n            optimizer.zero_grad()\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item()\n        print(f'Epoch {epoch+1}, Loss: {running_loss/len(train_loader)}')\n\ndef evaluate_network(model, test_loader, device):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for inputs, labels in test_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            _, predicted = torch.max(outputs.data, 1) #get prediction\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n    print(f'Accuracy: {100 * correct / total:.2f}%')\n\ndef custom_cross_entropy(input, target):\n    \"\"\"\n    Custom cross-entropy loss function.\n\n    Args:\n        input (torch.Tensor): Logits from the model (batch_size, num_classes).\n        target (torch.Tensor): Ground truth labels (batch_size,) or (batch_size, num_classes).\n\n    Returns:\n        torch.Tensor: Scalar loss value.\n    \"\"\"\n    # Your custom loss calculation here...\n    # Ensure the output is a scalar tensor.\n    # example:\n    # log_probs = torch.log_softmax(input, dim=1)\n    # loss = -torch.mean(torch.sum(target * log_probs, dim=1))\n\n    return loss\n\n# Example Usage\nif __name__ == \"__main__\":\n    # Hyperparameters\n    input_size = 64\n    hidden_size = 64\n    output_size = 64  # Example: 5 classes for classification\n    learning_rate = 0.001\n    epochs = 50\n    batch_size = 64\n\n    # Sample Data (replace with your actual data)\n    import numpy as np\n    X_train = np.random.rand(1000, input_size).astype(np.float32)\n    y_train = np.random.randint(0, output_size, 1000).astype(np.int64)\n    X_test = np.random.rand(200, input_size).astype(np.float32)\n    y_test = np.random.randint(0, output_size, 200).astype(np.int64)\n    print(f\"Xtrain is {X_train} \\n ytrain is {y_train}\")\n\n    # Convert to PyTorch tensors\n    X_train_tensor = torch.tensor(X_train)\n    y_train_tensor = torch.tensor(y_train)\n    X_test_tensor = torch.tensor(X_test)\n    y_test_tensor = torch.tensor(y_test)\n\n    # Create DataLoaders\n    train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n\n    # Device configuration\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n    # Initialize the network\n    model = SimpleNeuralNet(input_size, hidden_size, output_size).to(device)\n\n    criterion = nn.CrossEntropyLoss() #for multiclass classification. Use nn.BCELoss for binary classification\n    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n\n    # Train the network\n    train_network(model, train_loader, criterion, optimizer, epochs, device)\n\n    # Evaluate the network\n    evaluate_network(model, test_loader, device)\n\n    ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:13:48.987214Z","iopub.execute_input":"2025-04-11T21:13:48.987532Z","iopub.status.idle":"2025-04-11T21:13:55.456017Z","shell.execute_reply.started":"2025-04-11T21:13:48.987505Z","shell.execute_reply":"2025-04-11T21:13:55.455114Z"}},"outputs":[{"name":"stdout","text":"Xtrain is [[0.11352459 0.9153748  0.39406002 ... 0.01390448 0.8689048  0.9451719 ]\n [0.6155372  0.24745552 0.75812536 ... 0.625914   0.78520423 0.9517978 ]\n [0.87545484 0.26472667 0.30463928 ... 0.961462   0.4413638  0.36277935]\n ...\n [0.6197503  0.8019115  0.6623174  ... 0.6261769  0.27776304 0.8864979 ]\n [0.4993062  0.7288348  0.6398835  ... 0.71948856 0.94830143 0.07112098]\n [0.7261922  0.3629133  0.5621163  ... 0.01360866 0.27228376 0.07188882]] \n ytrain is [55 62 58 47 54 60 57 21 27 15  7 18 45 18 23 52  6 18 38 19 62 49 51 11\n 51  4 48 46 27 13 53 38 29  6 30 35 50 48 60 12  8  8 29 14 31 44  6 31\n 20  3 23 39 32 32 61 31 42 37 56  4 11  3 22 20 42 51 32 23 60 22 44 62\n 20 21 53 39 33 40 24 50 39 11 54 53 10 33 38 61 10  2 10 55 39  9  6 53\n 17  9  8 22 28 20  9 15 48 35 12 50 49 14 15 29 40  8 53 47  4 57 19 48\n 53 27 44 40 48 30 41 28 25 23  7 57 43 54 53  8 13 45  7 57 21 53  0 59\n 21  4  0 58  9 47 38 59  3  1 14 32 35 38  0  3  8 21 12  9 41 48 20 21\n 13  6 48 61 59 41 47 30 15  2 36  7 45 38 51 49 63 52 33 16  6 37  7  8\n 53 39 38 22 60 11 43 21 50 27 22 61 47 50 26 57 58  1 15  7 18 17 36 38\n 36 56 22 57 60 48 18 56 12  3 44 47 41 14 14 24  2 22  8 48 41 39 44 34\n 28 33 41 47 58 38 29  5  4 54 33 53 43 39 58 45 33 21 49 21 57 32  9 28\n 32 28 16 22 22 17 49 33  5 50 34  5 32  1 14  2 18 20 36 51 35 56  5 57\n 32 24  2  0 39 48 33 50 12  4 44 18 42 16 12  0 14 60 33 59 58 40 28 37\n 50 60 63 46 18 60 17 12 57  4 41 10 29 31  0 14 49 38 56  7 43 30 28 61\n 14 50 16 41  2 15 29 34 11 28 39 62 47 39  2 52 13 44 20 33 30 49 12 26\n 47 23 27 44 45 55  0  4  2 35  0  6 12 23 27 52 46 41 33 31 58 16 27 52\n  7 24 57 37 34 55 13 63 46 50 55  1 27 33 39 21 10 42 15 30 12 42  7 44\n 10 61 46 36  1 56 34 59  7 28 62 30 14  7 38 36 13 12 56 28 63 32 45  1\n 38 11 30  6 38 17  5  8 54 26 38 32 58 23 29 15 62 42  1 22 11 41 51 39\n 18 42 23 54 56 29  2 53 16 62 24 13 45 48 28 23  9 15  4 20 50 54 38 28\n  9 40 24 33 12 18 14 38  3 24  8  3 34  7 48 23 30 46 35 19 33 33 49 24\n 12 30  4  1  8 46 50 46 23  0 34 37 54 23 53 21  5  1 20 45 22 56 11 57\n 20 53 26 59  8 19  0 30 11 45 34 63 15 62 53 23 27 24 57 61 59  9 63 34\n 40 54 54 27 12 33 20 41 21 29  9 27 57 50 19  9 34 62 58 62 60 37  3 26\n  5 29 30 36 52 30 24 55 34 43 30 47 27 16 39 15 18 34 50 57 40 14 10 56\n 24 53 18 41 56 43  3 44 21  1 40 22 39 56 11 16  7  1 42 32 21 38 45 43\n 61 23 29 28 35 36  2  5 11 40 22 43 54 63 42 38 24 29 10 61 46 44 59  3\n 32 31 61 17 11 59 47 22  0 25 14  0 46  4 41 19 26 20 63 36  8  4 62 59\n 18 24 58 38 36 61 15 56 17 12  2  7  7 36 54  4 48 41 36 44 46  7 63 62\n 22 20 14 51 59 36 19 29 14 46 29 12 48  3 15 49  5 56 59  7 14 49 34 60\n  1 52 21 59 21 29 22 39 23 23 59  7 28 31  2 26 16 51 29 49  3 47  5 44\n 61 60 31  1 48 23 54 53 16 34  1 45 40 63 42 43 52 12 58 34 32  6  4 23\n 38  8 50 41 32 39 21  1 54 33 27  0 62 38 61 23 36  9 46 14 55  2 55 19\n 62 53 40 48 36 52 36 59 13 19 33 43 42 41 47 23 53 37 19 29 27 29 28 48\n 50 60 14 12 35 52  4 29 53 52 61 57 17 15  8 32 18 36 30  7 20 52 26 60\n 23 55 38 48 33 58  6 45 14 50 29 36 36 36 51 51 10 44  9 37 24 21  1 58\n 14 24 26 27 31 54 58 50 33 41 60  3  3 35 52 58 11 29 34  2  2 30 57  0\n 55  2 35 13 29 28 24 33 44 21 51 43  8 24  7 20 49  9 20 22 44  6 25 38\n 59 17 36 14 10 13 56  8 59 37 17 33 19 18 16 38  5 25 36 13 50  2  5 55\n 19 57 62 46 38 14 50 44 48 26 42 13 14 14  8 55 39 36 12 51  2 33 28 60\n 12 38 62 58 10  8 42  4 50 63 28 42  5 33 23  8 62 45 31 15 61  6 25 61\n 56 30 54 46  4 39 30 62 25 24 13 39 53 28 36 43]\nEpoch 1, Loss: 4.165081858634949\nEpoch 2, Loss: 4.143247365951538\nEpoch 3, Loss: 4.129414081573486\nEpoch 4, Loss: 4.118722349405289\nEpoch 5, Loss: 4.103472322225571\nEpoch 6, Loss: 4.096006840467453\nEpoch 7, Loss: 4.083185613155365\nEpoch 8, Loss: 4.076276183128357\nEpoch 9, Loss: 4.065081417560577\nEpoch 10, Loss: 4.0518670082092285\nEpoch 11, Loss: 4.039534389972687\nEpoch 12, Loss: 4.025552570819855\nEpoch 13, Loss: 4.0099726021289825\nEpoch 14, Loss: 3.998696878552437\nEpoch 15, Loss: 3.9831273704767227\nEpoch 16, Loss: 3.9664773792028427\nEpoch 17, Loss: 3.953490689396858\nEpoch 18, Loss: 3.9384012073278427\nEpoch 19, Loss: 3.926220014691353\nEpoch 20, Loss: 3.90943206846714\nEpoch 21, Loss: 3.893133819103241\nEpoch 22, Loss: 3.8733218759298325\nEpoch 23, Loss: 3.854768842458725\nEpoch 24, Loss: 3.839582994580269\nEpoch 25, Loss: 3.820007547736168\nEpoch 26, Loss: 3.799959897994995\nEpoch 27, Loss: 3.7815068662166595\nEpoch 28, Loss: 3.7655207067728043\nEpoch 29, Loss: 3.748363271355629\nEpoch 30, Loss: 3.7305561006069183\nEpoch 31, Loss: 3.706565797328949\nEpoch 32, Loss: 3.691112294793129\nEpoch 33, Loss: 3.6655052602291107\nEpoch 34, Loss: 3.652743101119995\nEpoch 35, Loss: 3.6268685311079025\nEpoch 36, Loss: 3.610647812485695\nEpoch 37, Loss: 3.587937757372856\nEpoch 38, Loss: 3.5703708231449127\nEpoch 39, Loss: 3.5490720123052597\nEpoch 40, Loss: 3.5223968774080276\nEpoch 41, Loss: 3.505527541041374\nEpoch 42, Loss: 3.4902015179395676\nEpoch 43, Loss: 3.472550079226494\nEpoch 44, Loss: 3.4502500891685486\nEpoch 45, Loss: 3.433751091361046\nEpoch 46, Loss: 3.4148396253585815\nEpoch 47, Loss: 3.3867217004299164\nEpoch 48, Loss: 3.3754689544439316\nEpoch 49, Loss: 3.3566576093435287\nEpoch 50, Loss: 3.336667850613594\nAccuracy: 1.50%\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"teamGameList = dict() #feeds team_ratings, gets fed into loss fxn\nfor s in range(1985,2025):\n    teamGameList[s] = []\n    dfs = dfy[dfy['Season'] == s]\n    dfs = dfs.reset_index()\n    for index, row in dfs.iterrows():\n        #print(row)\n        teamGameList[s].append(int(row['WTeamID']))\n        teamGameList[s].append(int(row['LTeamID']))\n\nteamList[s]\n#print(teamGameList)\nnum_games = 63\nbrier_scores = []\n\nfor i in range(num_games):\n    team1_ratings = team_ratings[i * 2] # team ratings are in pairs, winner first\n    team2_ratings = team_ratings[i * 2 + 1] # team ratings are in pairs.\n    predicted_probability = prediction_function(team1_ratings, team2_ratings)\n    brier_score = (predicted_probability - 1) ** 2\n    brier_scores.append(brier_score)\n\nreturn torch.mean(torch.stack(brier_scores))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:14:46.121469Z","iopub.execute_input":"2025-04-11T21:14:46.121859Z","iopub.status.idle":"2025-04-11T21:14:46.280013Z","shell.execute_reply.started":"2025-04-11T21:14:46.121831Z","shell.execute_reply":"2025-04-11T21:14:46.279087Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-8de4b4071209>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_games\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mteam1_ratings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mteam_ratings\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# team ratings are in pairs, winner first\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mteam2_ratings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mteam_ratings\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# team ratings are in pairs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mpredicted_probability\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprediction_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mteam1_ratings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mteam2_ratings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'team_ratings' is not defined"],"ename":"NameError","evalue":"name 'team_ratings' is not defined","output_type":"error"}],"execution_count":20},{"cell_type":"code","source":"big = dict()\nids = dict()\nfor y in range(2003,2025):\n    big[y] = dict()\n    dfy = dfres[dfres['Season'] == y] #only do teams in tourney\n    teamGameList[y] = []\n    dfy = dfy.reset_index()\n    for index, row in dfy.iterrows():\n        #print(row)\n        teamGameList[y].append(int(row['WTeamID']))\n        teamGameList[y].append(int(row['LTeamID']))\n    ids[y] = list(set(teamGameList[y]))\n    for i in ids[y][:10]:\n        big[y][i] = dict()\n        dfi = df[df['TeamID'] == i]\n        for s in syss:\n            dfs = dfi[dfi['SystemName'] == s]\n            if not dfs[dfs['Season'] == y].empty:\n                big[y][i][s] = dfs[dfs['Season'] == y].iat[0,4]\n            else:\n                big[y][i][s] = 999","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:09:10.905786Z","iopub.execute_input":"2025-04-11T22:09:10.906094Z","iopub.status.idle":"2025-04-11T22:09:29.723138Z","shell.execute_reply.started":"2025-04-11T22:09:10.906066Z","shell.execute_reply":"2025-04-11T22:09:29.721548Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"import pandas as pd\ndfres = pd.read_csv(\"/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyCompactResults.csv\")\ndfres = dfres[[\"Season\",\"WTeamID\",\"LTeamID\"]]\ndf = pd.read_csv(\"/kaggle/input/march-machine-learning-mania-2025/MMasseyOrdinals.csv\")\n#print(df)\n\ndf = df[df[\"RankingDayNum\"] >= 133]\n\nsyss = df[\"SystemName\"].unique()\n\nprint(syss)\n    #X_train = np.random.rand(1000, input_size).astype(np.float32)\n    #y_train = np.random.randint(0, output_size, 1000).astype(np.int64)\n    #X_test = np.random.rand(200, input_size).astype(np.float32)\n    #y_test = np.random.randint(0, output_size, 200).astype(np.int64)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:57:31.106171Z","iopub.execute_input":"2025-04-11T21:57:31.10652Z","iopub.status.idle":"2025-04-11T21:57:32.36086Z","shell.execute_reply.started":"2025-04-11T21:57:31.106487Z","shell.execute_reply":"2025-04-11T21:57:32.359591Z"}},"outputs":[{"name":"stdout","text":"['AP' 'ARG' 'BIH' 'BOB' 'BRZ' 'COL' 'DOL' 'DUN' 'DWH' 'ECK' 'ENT' 'ERD'\n 'GRN' 'GRS' 'HER' 'HOL' 'IMS' 'MAS' 'MKV' 'MOR' 'POM' 'RPI' 'RTH' 'SAG'\n 'SAU' 'SE' 'SEL' 'STR' 'TSR' 'USA' 'WLK' 'WOB' 'WOL' 'WTE' 'BD' 'CNG'\n 'DES' 'JON' 'LYN' 'MGY' 'NOR' 'REI' 'RM' 'SIM' 'ACU' 'BCM' 'CMV' 'DC'\n 'KLK' 'REN' 'RIS' 'ROH' 'SAP' 'SCR' 'WIL' 'DOK' 'JCI' 'KPK' 'MB' 'PH'\n 'PIG' 'PKL' 'TRX' 'CPR' 'ISR' 'KRA' 'LYD' 'RTR' 'UCS' 'BKM' 'CPA' 'JEN'\n 'PGH' 'REW' 'RSE' 'SPW' 'STH' 'BPI' 'DC2' 'DCI' 'HKB' 'LMC' 'NOL' 'OMY'\n 'RTB' 'KEL' 'KMV' 'RT' 'TW' 'AUS' 'KOS' 'PEQ' 'PTS' 'ROG' 'RTP' 'TMR'\n '7OT' 'ADE' 'BBT' 'BNM' 'BUR' 'CJB' 'CRO' 'EBP' 'HAT' 'MSX' 'SFX' 'TBD'\n 'BLS' 'D1A' 'DII' 'KBM' 'TPR' 'MvG' 'PPR' 'SP' 'SPR' 'STF' 'STS' 'TRP'\n 'UPS' 'WMR' 'BWE' 'LOG' 'TRK' 'DAV' 'FAS' 'FSH' 'HAS' 'HRN' 'KPI' 'MCL'\n 'CRW' 'DDB' 'ESR' 'FMG' 'HKS' 'INP' 'JNG' 'JRT' 'MUZ' 'OCT' 'PMC' 'PRR'\n 'RSL' 'SGR' 'SMN' 'SMS' 'YAG' 'ZAM' 'BNT' 'COX' 'JJK' 'LAB' 'MMG' 'STM'\n 'WMV' 'AWS' 'INC' 'LAW' 'LEF' 'MGS' 'NET' 'PIR' 'BNZ' 'CBR' 'CWL' 'EMK'\n 'FDM' 'KCX' 'RWP' 'SRS' 'ATP' 'BAR' 'OMN' 'RMS' 'STY' 'BMN' 'DP' 'PAC'\n 'WAB']\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"#print(big[2023])\nprint(list(set(teamGameList[2023])))\nprint(big[2023][1281]['AP'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:25:33.951068Z","iopub.execute_input":"2025-04-11T22:25:33.951349Z","iopub.status.idle":"2025-04-11T22:25:33.956175Z","shell.execute_reply.started":"2025-04-11T22:25:33.951328Z","shell.execute_reply":"2025-04-11T22:25:33.955174Z"}},"outputs":[{"name":"stdout","text":"[1280, 1281, 1272, 1411, 1158, 1159, 1286, 1417, 1418, 1163, 1421, 1166, 1297, 1425, 1429, 1301, 1305, 1433, 1179, 1436, 1181, 1438, 1192, 1321, 1194, 1452, 1202, 1331, 1462, 1336, 1338, 1211, 1213, 1343, 1344, 1345, 1222, 1224, 1228, 1231, 1104, 1361, 1234, 1233, 1364, 1235, 1112, 1113, 1369, 1242, 1116, 1245, 1243, 1246, 1120, 1244, 1124, 1129, 1388, 1394, 1266, 1268, 1397, 1395, 1400, 1401, 1274, 1277]\n23\n","output_type":"stream"}],"execution_count":41},{"cell_type":"code","source":"def predMaker(team1score,team2score):\n    return (0.5 + 0.5*(team1score-team2score)/(team1score+team2score))\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:29:11.861078Z","iopub.execute_input":"2025-03-19T20:29:11.861512Z","iopub.status.idle":"2025-03-19T20:29:11.869573Z","shell.execute_reply.started":"2025-03-19T20:29:11.86148Z","shell.execute_reply":"2025-03-19T20:29:11.868071Z"}},"outputs":[],"execution_count":null}]}