{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11484718,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/bosstinanderson/marchmadnessnn2025v2?scriptVersionId=233358388\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\nclass SimpleNeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(SimpleNeuralNet, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.fc2(x)\n        return x\n\ndef train_network(model, train_loader, criterion, optimizer, epochs, device):\n    model.train()\n    for epoch in range(epochs):\n        running_loss = 0.0\n        for inputs, labels in train_loader:\n            inputs, labels = inputs.to(device), labels.to(device) #move data to device\n            optimizer.zero_grad()\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item()\n        print(f'Epoch {epoch+1}, Loss: {running_loss/len(train_loader)}')\n\ndef evaluate_network(model, test_loader, device):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for inputs, labels in test_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            _, predicted = torch.max(outputs.data, 1) #get prediction\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n    print(f'Accuracy: {100 * correct / total:.2f}%')\n\ndef custom_cross_entropy(input, target):\n    \"\"\"\n    Custom cross-entropy loss function.\n\n    Args:\n        input (torch.Tensor): Logits from the model (batch_size, num_classes).\n        target (torch.Tensor): Ground truth labels (batch_size,) or (batch_size, num_classes).\n\n    Returns:\n        torch.Tensor: Scalar loss value.\n    \"\"\"\n    # Your custom loss calculation here...\n    # Ensure the output is a scalar tensor.\n    # example:\n    # log_probs = torch.log_softmax(input, dim=1)\n    # loss = -torch.mean(torch.sum(target * log_probs, dim=1))\n\n    return loss\n\n# Example Usage\nif __name__ == \"__main__\":\n    # Hyperparameters\n    input_size = 64*181\n    hidden_size = 181\n    output_size = 64  # Example: 5 classes for classification\n    learning_rate = 0.001\n    epochs = 50\n    batch_size = 64\n\n    # Sample Data (replace with your actual data)\n    import numpy as np\n    #X_train = np.random.rand(1000, input_size).astype(np.float32)\n    X_train = []\n    for y in range(2003,2025):\n        X_trainyear = []\n        for i in ids[y]:\n            X_trainyear += [big[y][i][s] for s in syss]\n        X_train.append(X_trainyear)\n        print(f'year is {y} X_trainyearlen is {len(X_trainyear)}')\n    y_train = np.random.randint(0, output_size, 1000).astype(np.int64)\n    X_test = np.random.rand(200, input_size).astype(np.float32)\n    y_test = np.random.randint(0, output_size, 200).astype(np.int64)\n    #print(f\"Xtrain is {X_train} \\n ytrain is {y_train}\")\n\n    # Convert to PyTorch tensors\n    X_train_tensor = torch.tensor(X_train)\n    y_train_tensor = torch.tensor(y_train)\n    X_test_tensor = torch.tensor(X_test)\n    y_test_tensor = torch.tensor(y_test)\n\n    # Create DataLoaders\n    train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n\n    # Device configuration\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n    # Initialize the network\n    model = SimpleNeuralNet(input_size, hidden_size, output_size).to(device)\n\n    criterion = nn.CrossEntropyLoss() #for multiclass classification. Use nn.BCELoss for binary classification\n    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n\n    # Train the network\n    train_network(model, train_loader, criterion, optimizer, epochs, device)\n\n    # Evaluate the network\n    evaluate_network(model, test_loader, device)\n\n    ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-11T23:06:10.929222Z","iopub.execute_input":"2025-04-11T23:06:10.929527Z","iopub.status.idle":"2025-04-11T23:06:11.032256Z","shell.execute_reply.started":"2025-04-11T23:06:10.9295Z","shell.execute_reply":"2025-04-11T23:06:11.031098Z"}},"outputs":[{"name":"stdout","text":"year is 2003 X_trainyearlen is 11765\nyear is 2004 X_trainyearlen is 11765\nyear is 2005 X_trainyearlen is 11765\nyear is 2006 X_trainyearlen is 11765\nyear is 2007 X_trainyearlen is 11765\nyear is 2008 X_trainyearlen is 11765\nyear is 2009 X_trainyearlen is 11765\nyear is 2010 X_trainyearlen is 11765\nyear is 2011 X_trainyearlen is 12308\nyear is 2012 X_trainyearlen is 12308\nyear is 2013 X_trainyearlen is 12308\nyear is 2014 X_trainyearlen is 12308\nyear is 2015 X_trainyearlen is 12308\nyear is 2016 X_trainyearlen is 12308\nyear is 2017 X_trainyearlen is 12308\nyear is 2018 X_trainyearlen is 12308\nyear is 2019 X_trainyearlen is 12308\nyear is 2020 X_trainyearlen is 0\nyear is 2021 X_trainyearlen is 12127\nyear is 2022 X_trainyearlen is 12308\nyear is 2023 X_trainyearlen is 12308\nyear is 2024 X_trainyearlen is 12308\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-49-2b0da755b63a>\u001b[0m in \u001b[0;36m<cell line: 66>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m     \u001b[0;31m# Convert to PyTorch tensors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m     \u001b[0mX_train_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m     \u001b[0my_train_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0mX_test_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: expected sequence of length 11765 at dim 1 (got 12308)"],"ename":"ValueError","evalue":"expected sequence of length 11765 at dim 1 (got 12308)","output_type":"error"}],"execution_count":49},{"cell_type":"code","source":"teamGameList = dict() #feeds team_ratings, gets fed into loss fxn\nfor s in range(1985,2025):\n    teamGameList[s] = []\n    dfs = dfy[dfy['Season'] == s]\n    dfs = dfs.reset_index()\n    for index, row in dfs.iterrows():\n        #print(row)\n        teamGameList[s].append(int(row['WTeamID']))\n        teamGameList[s].append(int(row['LTeamID']))\n\nteamList[s]\n#print(teamGameList)\nnum_games = 63\nbrier_scores = []\n\nfor i in range(num_games):\n    team1_ratings = team_ratings[i * 2] # team ratings are in pairs, winner first\n    team2_ratings = team_ratings[i * 2 + 1] # team ratings are in pairs.\n    predicted_probability = prediction_function(team1_ratings, team2_ratings)\n    brier_score = (predicted_probability - 1) ** 2\n    brier_scores.append(brier_score)\n\nreturn torch.mean(torch.stack(brier_scores))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:14:46.121469Z","iopub.execute_input":"2025-04-11T21:14:46.121859Z","iopub.status.idle":"2025-04-11T21:14:46.280013Z","shell.execute_reply.started":"2025-04-11T21:14:46.121831Z","shell.execute_reply":"2025-04-11T21:14:46.279087Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-8de4b4071209>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_games\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mteam1_ratings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mteam_ratings\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# team ratings are in pairs, winner first\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mteam2_ratings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mteam_ratings\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# team ratings are in pairs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mpredicted_probability\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprediction_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mteam1_ratings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mteam2_ratings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'team_ratings' is not defined"],"ename":"NameError","evalue":"name 'team_ratings' is not defined","output_type":"error"}],"execution_count":20},{"cell_type":"code","source":"big = dict()\nids = dict()\nfor y in range(2003,2025):\n    big[y] = dict()\n    dfy = dfres[dfres['Season'] == y] #only do teams in tourney\n    teamGameList[y] = []\n    dfy = dfy.reset_index()\n    for index, row in dfy.iterrows():\n        #print(row)\n        teamGameList[y].append(int(row['WTeamID']))\n        teamGameList[y].append(int(row['LTeamID']))\n    ids[y] = list(set(teamGameList[y]))\n    for i in ids[y]:\n        big[y][i] = dict()\n        dfi = df[df['TeamID'] == i]\n        for s in syss:\n            dfs = dfi[dfi['SystemName'] == s]\n            if not dfs[dfs['Season'] == y].empty:\n                big[y][i][s] = dfs[dfs['Season'] == y].iat[0,4]\n            else:\n                big[y][i][s] = 999","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:54:54.708931Z","iopub.execute_input":"2025-04-11T22:54:54.709216Z","iopub.status.idle":"2025-04-11T22:56:59.477954Z","shell.execute_reply.started":"2025-04-11T22:54:54.709193Z","shell.execute_reply":"2025-04-11T22:56:59.477185Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"import pandas as pd\ndfres = pd.read_csv(\"/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyCompactResults.csv\")\ndfres = dfres[[\"Season\",\"WTeamID\",\"LTeamID\"]]\ndf = pd.read_csv(\"/kaggle/input/march-machine-learning-mania-2025/MMasseyOrdinals.csv\")\n#print(df)\n\ndf = df[df[\"RankingDayNum\"] >= 133]\n\nsyss = df[\"SystemName\"].unique()\n\nprint(syss)\n    #X_train = np.random.rand(1000, input_size).astype(np.float32)\n    #y_train = np.random.randint(0, output_size, 1000).astype(np.int64)\n    #X_test = np.random.rand(200, input_size).astype(np.float32)\n    #y_test = np.random.randint(0, output_size, 200).astype(np.int64)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:57:31.106171Z","iopub.execute_input":"2025-04-11T21:57:31.10652Z","iopub.status.idle":"2025-04-11T21:57:32.36086Z","shell.execute_reply.started":"2025-04-11T21:57:31.106487Z","shell.execute_reply":"2025-04-11T21:57:32.359591Z"}},"outputs":[{"name":"stdout","text":"['AP' 'ARG' 'BIH' 'BOB' 'BRZ' 'COL' 'DOL' 'DUN' 'DWH' 'ECK' 'ENT' 'ERD'\n 'GRN' 'GRS' 'HER' 'HOL' 'IMS' 'MAS' 'MKV' 'MOR' 'POM' 'RPI' 'RTH' 'SAG'\n 'SAU' 'SE' 'SEL' 'STR' 'TSR' 'USA' 'WLK' 'WOB' 'WOL' 'WTE' 'BD' 'CNG'\n 'DES' 'JON' 'LYN' 'MGY' 'NOR' 'REI' 'RM' 'SIM' 'ACU' 'BCM' 'CMV' 'DC'\n 'KLK' 'REN' 'RIS' 'ROH' 'SAP' 'SCR' 'WIL' 'DOK' 'JCI' 'KPK' 'MB' 'PH'\n 'PIG' 'PKL' 'TRX' 'CPR' 'ISR' 'KRA' 'LYD' 'RTR' 'UCS' 'BKM' 'CPA' 'JEN'\n 'PGH' 'REW' 'RSE' 'SPW' 'STH' 'BPI' 'DC2' 'DCI' 'HKB' 'LMC' 'NOL' 'OMY'\n 'RTB' 'KEL' 'KMV' 'RT' 'TW' 'AUS' 'KOS' 'PEQ' 'PTS' 'ROG' 'RTP' 'TMR'\n '7OT' 'ADE' 'BBT' 'BNM' 'BUR' 'CJB' 'CRO' 'EBP' 'HAT' 'MSX' 'SFX' 'TBD'\n 'BLS' 'D1A' 'DII' 'KBM' 'TPR' 'MvG' 'PPR' 'SP' 'SPR' 'STF' 'STS' 'TRP'\n 'UPS' 'WMR' 'BWE' 'LOG' 'TRK' 'DAV' 'FAS' 'FSH' 'HAS' 'HRN' 'KPI' 'MCL'\n 'CRW' 'DDB' 'ESR' 'FMG' 'HKS' 'INP' 'JNG' 'JRT' 'MUZ' 'OCT' 'PMC' 'PRR'\n 'RSL' 'SGR' 'SMN' 'SMS' 'YAG' 'ZAM' 'BNT' 'COX' 'JJK' 'LAB' 'MMG' 'STM'\n 'WMV' 'AWS' 'INC' 'LAW' 'LEF' 'MGS' 'NET' 'PIR' 'BNZ' 'CBR' 'CWL' 'EMK'\n 'FDM' 'KCX' 'RWP' 'SRS' 'ATP' 'BAR' 'OMN' 'RMS' 'STY' 'BMN' 'DP' 'PAC'\n 'WAB']\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"#print(big[2023])\nprint(list(set(teamGameList[2023])))\nprint(big[2023][1281])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:27:11.042679Z","iopub.execute_input":"2025-04-11T22:27:11.043026Z","iopub.status.idle":"2025-04-11T22:27:11.048264Z","shell.execute_reply.started":"2025-04-11T22:27:11.043002Z","shell.execute_reply":"2025-04-11T22:27:11.047261Z"}},"outputs":[{"name":"stdout","text":"[1280, 1281, 1272, 1411, 1158, 1159, 1286, 1417, 1418, 1163, 1421, 1166, 1297, 1425, 1429, 1301, 1305, 1433, 1179, 1436, 1181, 1438, 1192, 1321, 1194, 1452, 1202, 1331, 1462, 1336, 1338, 1211, 1213, 1343, 1344, 1345, 1222, 1224, 1228, 1231, 1104, 1361, 1234, 1233, 1364, 1235, 1112, 1113, 1369, 1242, 1116, 1245, 1243, 1246, 1120, 1244, 1124, 1129, 1388, 1394, 1266, 1268, 1397, 1395, 1400, 1401, 1274, 1277]\n{'AP': 23, 'ARG': 37, 'BIH': 23, 'BOB': 999, 'BRZ': 999, 'COL': 25, 'DOL': 16, 'DUN': 34, 'DWH': 999, 'ECK': 999, 'ENT': 999, 'ERD': 999, 'GRN': 999, 'GRS': 999, 'HER': 999, 'HOL': 999, 'IMS': 999, 'MAS': 38, 'MKV': 999, 'MOR': 40, 'POM': 51, 'RPI': 34, 'RTH': 28, 'SAG': 52, 'SAU': 999, 'SE': 999, 'SEL': 25, 'STR': 999, 'TSR': 999, 'USA': 24, 'WLK': 45, 'WOB': 22, 'WOL': 24, 'WTE': 999, 'BD': 999, 'CNG': 999, 'DES': 19, 'JON': 999, 'LYN': 999, 'MGY': 999, 'NOR': 999, 'REI': 999, 'RM': 999, 'SIM': 999, 'ACU': 999, 'BCM': 999, 'CMV': 999, 'DC': 999, 'KLK': 45, 'REN': 999, 'RIS': 999, 'ROH': 999, 'SAP': 999, 'SCR': 999, 'WIL': 19, 'DOK': 52, 'JCI': 999, 'KPK': 33, 'MB': 20, 'PH': 999, 'PIG': 999, 'PKL': 999, 'TRX': 999, 'CPR': 999, 'ISR': 999, 'KRA': 21, 'LYD': 999, 'RTR': 999, 'UCS': 999, 'BKM': 999, 'CPA': 999, 'JEN': 999, 'PGH': 23, 'REW': 23, 'RSE': 999, 'SPW': 999, 'STH': 39, 'BPI': 999, 'DC2': 999, 'DCI': 50, 'HKB': 999, 'LMC': 60, 'NOL': 28, 'OMY': 999, 'RTB': 999, 'KEL': 999, 'KMV': 999, 'RT': 47, 'TW': 999, 'AUS': 999, 'KOS': 999, 'PEQ': 999, 'PTS': 999, 'ROG': 999, 'RTP': 29, 'TMR': 999, '7OT': 67, 'ADE': 999, 'BBT': 51, 'BNM': 999, 'BUR': 999, 'CJB': 999, 'CRO': 999, 'EBP': 61, 'HAT': 999, 'MSX': 999, 'SFX': 42, 'TBD': 999, 'BLS': 999, 'D1A': 999, 'DII': 42, 'KBM': 999, 'TPR': 50, 'MvG': 999, 'PPR': 999, 'SP': 999, 'SPR': 37, 'STF': 999, 'STS': 999, 'TRP': 51, 'UPS': 999, 'WMR': 999, 'BWE': 39, 'LOG': 55, 'TRK': 56, 'DAV': 999, 'FAS': 25, 'FSH': 999, 'HAS': 38, 'HRN': 999, 'KPI': 999, 'MCL': 999, 'CRW': 999, 'DDB': 999, 'ESR': 16, 'FMG': 999, 'HKS': 999, 'INP': 999, 'JNG': 24, 'JRT': 999, 'MUZ': 999, 'OCT': 999, 'PMC': 999, 'PRR': 999, 'RSL': 999, 'SGR': 999, 'SMN': 999, 'SMS': 40, 'YAG': 999, 'ZAM': 999, 'BNT': 999, 'COX': 999, 'JJK': 24, 'LAB': 999, 'MMG': 60, 'STM': 999, 'WMV': 33, 'AWS': 999, 'INC': 52, 'LAW': 55, 'LEF': 999, 'MGS': 999, 'NET': 42, 'PIR': 48, 'BNZ': 53, 'CBR': 40, 'CWL': 999, 'EMK': 66, 'FDM': 999, 'KCX': 49, 'RWP': 37, 'SRS': 49, 'ATP': 20, 'BAR': 52, 'OMN': 56, 'RMS': 20, 'STY': 33, 'BMN': 999, 'DP': 999, 'PAC': 999, 'WAB': 999}\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"print(len(syss))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T22:33:38.262994Z","iopub.execute_input":"2025-04-11T22:33:38.263296Z","iopub.status.idle":"2025-04-11T22:33:38.267808Z","shell.execute_reply.started":"2025-04-11T22:33:38.263272Z","shell.execute_reply":"2025-04-11T22:33:38.266926Z"}},"outputs":[{"name":"stdout","text":"181\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"def predMaker(team1score,team2score):\n    return (0.5 + 0.5*(team1score-team2score)/(team1score+team2score))\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:29:11.861078Z","iopub.execute_input":"2025-03-19T20:29:11.861512Z","iopub.status.idle":"2025-03-19T20:29:11.869573Z","shell.execute_reply.started":"2025-03-19T20:29:11.86148Z","shell.execute_reply":"2025-03-19T20:29:11.868071Z"}},"outputs":[],"execution_count":null}]}