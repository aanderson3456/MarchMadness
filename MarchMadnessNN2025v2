{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11484718,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/bosstinanderson/marchmadnessnn2025v2?scriptVersionId=233358388\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\nclass SimpleNeuralNet(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(SimpleNeuralNet, self).__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.fc2(x)\n        return x\n\ndef train_network(model, train_loader, criterion, optimizer, epochs, device):\n    model.train()\n    for epoch in range(epochs):\n        running_loss = 0.0\n        for inputs, labels in train_loader:\n            inputs, labels = inputs.to(device), labels.to(device) #move data to device\n            optimizer.zero_grad()\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item()\n        print(f'Epoch {epoch+1}, Loss: {running_loss/len(train_loader)}')\n\ndef evaluate_network(model, test_loader, device):\n    model.eval()\n    correct = 0\n    total = 0\n    with torch.no_grad():\n        for inputs, labels in test_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            _, predicted = torch.max(outputs.data, 1) #get prediction\n            total += labels.size(0)\n            correct += (predicted == labels).sum().item()\n    print(f'Accuracy: {100 * correct / total:.2f}%')\n\ndef custom_cross_entropy(input, target):\n    \"\"\"\n    Custom cross-entropy loss function.\n\n    Args:\n        input (torch.Tensor): Logits from the model (batch_size, num_classes).\n        target (torch.Tensor): Ground truth labels (batch_size,) or (batch_size, num_classes).\n\n    Returns:\n        torch.Tensor: Scalar loss value.\n    \"\"\"\n    # Your custom loss calculation here...\n    # Ensure the output is a scalar tensor.\n    # example:\n    # log_probs = torch.log_softmax(input, dim=1)\n    # loss = -torch.mean(torch.sum(target * log_probs, dim=1))\n\n    return loss\n\n# Example Usage\nif __name__ == \"__main__\":\n    # Hyperparameters\n    input_size = 64\n    hidden_size = 64\n    output_size = 64  # Example: 5 classes for classification\n    learning_rate = 0.001\n    epochs = 50\n    batch_size = 64\n\n    # Sample Data (replace with your actual data)\n    import numpy as np\n    X_train = np.random.rand(1000, input_size).astype(np.float32)\n    y_train = np.random.randint(0, output_size, 1000).astype(np.int64)\n    X_test = np.random.rand(200, input_size).astype(np.float32)\n    y_test = np.random.randint(0, output_size, 200).astype(np.int64)\n    print(f\"Xtrain is {X_train} \\n ytrain is {y_train}\")\n\n    # Convert to PyTorch tensors\n    X_train_tensor = torch.tensor(X_train)\n    y_train_tensor = torch.tensor(y_train)\n    X_test_tensor = torch.tensor(X_test)\n    y_test_tensor = torch.tensor(y_test)\n\n    # Create DataLoaders\n    train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n\n    # Device configuration\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n    # Initialize the network\n    model = SimpleNeuralNet(input_size, hidden_size, output_size).to(device)\n\n    criterion = nn.CrossEntropyLoss() #for multiclass classification. Use nn.BCELoss for binary classification\n    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n\n    # Train the network\n    train_network(model, train_loader, criterion, optimizer, epochs, device)\n\n    # Evaluate the network\n    evaluate_network(model, test_loader, device)\n\n    ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-01T03:19:05.528298Z","iopub.execute_input":"2025-04-01T03:19:05.52865Z","iopub.status.idle":"2025-04-01T03:19:13.605228Z","shell.execute_reply.started":"2025-04-01T03:19:05.528619Z","shell.execute_reply":"2025-04-01T03:19:13.604191Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\ndfy = pd.read_csv(\"/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyCompactResults.csv\")\ndfy = dfy[[\"Season\",\"WTeamID\",\"LTeamID\"]]\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"teamGameList = dict()\nfor s in range(1985,2025):\n    teamGameList[s] = []\n    dfs = dfy[dfy['Season'] == s]\n    dfs = dfs.reset_index()\n    for index, row in dfs.iterrows():\n        #print(row)\n        teamGameList[s].append(int(row['WTeamID']))\n        teamGameList[s].append(int(row['LTeamID']))\n\n#print(teamGameList)\nnum_games = 63\nbrier_scores = []\n\nfor i in range(num_games):\n    team1_ratings = team_ratings[i * 2] # team ratings are in pairs, winner first\n    team2_ratings = team_ratings[i * 2 + 1] # team ratings are in pairs.\n    predicted_probability = prediction_function(team1_ratings, team2_ratings)\n    brier_score = (predicted_probability - 1) ** 2\n    brier_scores.append(brier_score)\n\nreturn torch.mean(torch.stack(brier_scores))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-07T19:20:18.14407Z","iopub.execute_input":"2025-04-07T19:20:18.14442Z","iopub.status.idle":"2025-04-07T19:20:18.278723Z","shell.execute_reply.started":"2025-04-07T19:20:18.144393Z","shell.execute_reply":"2025-04-07T19:20:18.277582Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\ndf = pd.read_csv(\"/kaggle/input/march-machine-learning-mania-2025/MMasseyOrdinals.csv\")\n\n#print(df)\n\ndf = df[df[\"RankingDayNum\"] >= 133]\n\nsyss = df[\"SystemName\"].unique()\n\nids = df[\"TeamID\"].unique()\n\nprint(syss)\n    #X_train = np.random.rand(1000, input_size).astype(np.float32)\n    #y_train = np.random.randint(0, output_size, 1000).astype(np.int64)\n    #X_test = np.random.rand(200, input_size).astype(np.float32)\n    #y_test = np.random.randint(0, output_size, 200).astype(np.int64)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-09T03:22:56.653308Z","iopub.execute_input":"2025-04-09T03:22:56.653749Z","iopub.status.idle":"2025-04-09T03:23:00.544678Z","shell.execute_reply.started":"2025-04-09T03:22:56.653712Z","shell.execute_reply":"2025-04-09T03:23:00.543605Z"}},"outputs":[{"name":"stdout","text":"['AP' 'ARG' 'BIH' 'BOB' 'BRZ' 'COL' 'DOL' 'DUN' 'DWH' 'ECK' 'ENT' 'ERD'\n 'GRN' 'GRS' 'HER' 'HOL' 'IMS' 'MAS' 'MKV' 'MOR' 'POM' 'RPI' 'RTH' 'SAG'\n 'SAU' 'SE' 'SEL' 'STR' 'TSR' 'USA' 'WLK' 'WOB' 'WOL' 'WTE' 'BD' 'CNG'\n 'DES' 'JON' 'LYN' 'MGY' 'NOR' 'REI' 'RM' 'SIM' 'ACU' 'BCM' 'CMV' 'DC'\n 'KLK' 'REN' 'RIS' 'ROH' 'SAP' 'SCR' 'WIL' 'DOK' 'JCI' 'KPK' 'MB' 'PH'\n 'PIG' 'PKL' 'TRX' 'CPR' 'ISR' 'KRA' 'LYD' 'RTR' 'UCS' 'BKM' 'CPA' 'JEN'\n 'PGH' 'REW' 'RSE' 'SPW' 'STH' 'BPI' 'DC2' 'DCI' 'HKB' 'LMC' 'NOL' 'OMY'\n 'RTB' 'KEL' 'KMV' 'RT' 'TW' 'AUS' 'KOS' 'PEQ' 'PTS' 'ROG' 'RTP' 'TMR'\n '7OT' 'ADE' 'BBT' 'BNM' 'BUR' 'CJB' 'CRO' 'EBP' 'HAT' 'MSX' 'SFX' 'TBD'\n 'BLS' 'D1A' 'DII' 'KBM' 'TPR' 'MvG' 'PPR' 'SP' 'SPR' 'STF' 'STS' 'TRP'\n 'UPS' 'WMR' 'BWE' 'LOG' 'TRK' 'DAV' 'FAS' 'FSH' 'HAS' 'HRN' 'KPI' 'MCL'\n 'CRW' 'DDB' 'ESR' 'FMG' 'HKS' 'INP' 'JNG' 'JRT' 'MUZ' 'OCT' 'PMC' 'PRR'\n 'RSL' 'SGR' 'SMN' 'SMS' 'YAG' 'ZAM' 'BNT' 'COX' 'JJK' 'LAB' 'MMG' 'STM'\n 'WMV' 'AWS' 'INC' 'LAW' 'LEF' 'MGS' 'NET' 'PIR' 'BNZ' 'CBR' 'CWL' 'EMK'\n 'FDM' 'KCX' 'RWP' 'SRS' 'ATP' 'BAR' 'OMN' 'RMS' 'STY' 'BMN' 'DP' 'PAC'\n 'WAB']\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"print(big[1112]['AP'][2023].iat[0,4])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T02:14:29.050127Z","iopub.execute_input":"2025-03-19T02:14:29.050726Z","iopub.status.idle":"2025-03-19T02:14:29.057563Z","shell.execute_reply.started":"2025-03-19T02:14:29.050683Z","shell.execute_reply":"2025-03-19T02:14:29.056553Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"big = dict()\nfor i in ids[:10]:\n    big[i] = dict()\n    dfi = df[df['TeamID'] == i]\n    for s in syss[:10]:\n        big[i][s] = dict()\n        dfs = dfi[dfi['SystemName'] == s]\n        for y in range(2003,2025):\n            if not dfs[dfs['Season'] == y].empty:\n                big[i][s][y] = dfs[dfs['Season'] == y].iat[0,4]\n            else:\n                big[i][s][y] = 999","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:29:02.082406Z","iopub.execute_input":"2025-03-19T20:29:02.082768Z","iopub.status.idle":"2025-03-19T20:29:03.07065Z","shell.execute_reply.started":"2025-03-19T20:29:02.082742Z","shell.execute_reply":"2025-03-19T20:29:03.069571Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def predMaker(team1score,team2score):\n    return (0.5 + 0.5*(team1score-team2score)/(team1score+team2score))\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:29:11.861078Z","iopub.execute_input":"2025-03-19T20:29:11.861512Z","iopub.status.idle":"2025-03-19T20:29:11.869573Z","shell.execute_reply.started":"2025-03-19T20:29:11.86148Z","shell.execute_reply":"2025-03-19T20:29:11.868071Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\n!git clone https://github.com/aanderson3456/MarchMadness.git\nos.chdir('./MarchMadness')\nprint(f\"Cloned repository and changed directory to: {os.getcwd()}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T20:56:37.318329Z","iopub.execute_input":"2025-04-11T20:56:37.318693Z","iopub.status.idle":"2025-04-11T20:56:38.21851Z","shell.execute_reply.started":"2025-04-11T20:56:37.318665Z","shell.execute_reply":"2025-04-11T20:56:38.217274Z"}},"outputs":[{"name":"stdout","text":"Cloning into 'MarchMadness'...\nremote: Enumerating objects: 9, done.\u001b[K\nremote: Counting objects: 100% (9/9), done.\u001b[K\nremote: Compressing objects: 100% (7/7), done.\u001b[K\nremote: Total 9 (delta 1), reused 4 (delta 1), pack-reused 0 (from 0)\u001b[K\nReceiving objects: 100% (9/9), 81.23 KiB | 4.51 MiB/s, done.\nResolving deltas: 100% (1/1), done.\nCloned repository and changed directory to: /kaggle/working/MarchMadness\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"#!git status\n#!git add MarchMadnessNN2025v2\nprint(os.getcwd())\nfor dirname, _, filenames in os.walk('/kaggle/input/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfor dirname, _, filenames in os.walk('/kaggle/working/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T21:05:19.065161Z","iopub.execute_input":"2025-04-11T21:05:19.065445Z","iopub.status.idle":"2025-04-11T21:05:19.094696Z","shell.execute_reply.started":"2025-04-11T21:05:19.065423Z","shell.execute_reply":"2025-04-11T21:05:19.093843Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working/MarchMadness\n/kaggle/input/march-machine-learning-mania-2025/Conferences.csv\n/kaggle/input/march-machine-learning-mania-2025/SeedBenchmarkStage1.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneyDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WRegularSeasonCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneySeedRoundSlots.csv\n/kaggle/input/march-machine-learning-mania-2025/MRegularSeasonDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MGameCities.csv\n/kaggle/input/march-machine-learning-mania-2025/WSecondaryTourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WGameCities.csv\n/kaggle/input/march-machine-learning-mania-2025/MSeasons.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneySlots.csv\n/kaggle/input/march-machine-learning-mania-2025/MSecondaryTourneyTeams.csv\n/kaggle/input/march-machine-learning-mania-2025/SampleSubmissionStage2.csv\n/kaggle/input/march-machine-learning-mania-2025/Cities.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeamSpellings.csv\n/kaggle/input/march-machine-learning-mania-2025/MRegularSeasonCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MMasseyOrdinals.csv\n/kaggle/input/march-machine-learning-mania-2025/MSecondaryTourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WTeams.csv\n/kaggle/input/march-machine-learning-mania-2025/WConferenceTourneyGames.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneySlots.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneySeeds.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WSeasons.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneySeeds.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeamCoaches.csv\n/kaggle/input/march-machine-learning-mania-2025/MConferenceTourneyGames.csv\n/kaggle/input/march-machine-learning-mania-2025/WRegularSeasonDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WTeamSpellings.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeamConferences.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeams.csv\n/kaggle/input/march-machine-learning-mania-2025/WTeamConferences.csv\n/kaggle/input/march-machine-learning-mania-2025/SampleSubmissionStage1.csv\n/kaggle/input/march-machine-learning-mania-2025/WSecondaryTourneyTeams.csv\n/kaggle/working/MarchMadness/LICENSE\n/kaggle/working/MarchMadness/marchmadnesspoweriter2025.ipynb\n/kaggle/working/MarchMadness/.git/index\n/kaggle/working/MarchMadness/.git/description\n/kaggle/working/MarchMadness/.git/config\n/kaggle/working/MarchMadness/.git/packed-refs\n/kaggle/working/MarchMadness/.git/HEAD\n/kaggle/working/MarchMadness/.git/hooks/pre-rebase.sample\n/kaggle/working/MarchMadness/.git/hooks/post-update.sample\n/kaggle/working/MarchMadness/.git/hooks/applypatch-msg.sample\n/kaggle/working/MarchMadness/.git/hooks/pre-applypatch.sample\n/kaggle/working/MarchMadness/.git/hooks/pre-commit.sample\n/kaggle/working/MarchMadness/.git/hooks/pre-receive.sample\n/kaggle/working/MarchMadness/.git/hooks/pre-push.sample\n/kaggle/working/MarchMadness/.git/hooks/prepare-commit-msg.sample\n/kaggle/working/MarchMadness/.git/hooks/pre-merge-commit.sample\n/kaggle/working/MarchMadness/.git/hooks/fsmonitor-watchman.sample\n/kaggle/working/MarchMadness/.git/hooks/commit-msg.sample\n/kaggle/working/MarchMadness/.git/hooks/update.sample\n/kaggle/working/MarchMadness/.git/hooks/push-to-checkout.sample\n/kaggle/working/MarchMadness/.git/info/exclude\n/kaggle/working/MarchMadness/.git/refs/remotes/origin/HEAD\n/kaggle/working/MarchMadness/.git/refs/heads/main\n/kaggle/working/MarchMadness/.git/logs/HEAD\n/kaggle/working/MarchMadness/.git/logs/refs/remotes/origin/HEAD\n/kaggle/working/MarchMadness/.git/logs/refs/heads/main\n/kaggle/working/MarchMadness/.git/objects/pack/pack-0bf5d3026b59bebf1e028770d1fb328a707d6959.idx\n/kaggle/working/MarchMadness/.git/objects/pack/pack-0bf5d3026b59bebf1e028770d1fb328a707d6959.pack\n","output_type":"stream"}],"execution_count":16}]}